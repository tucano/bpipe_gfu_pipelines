#!/bin/bash

## DESCRIPTION: generate a bpipe.config file in current directory

## AUTHOR: davide.rambaldi AT gmail.com

declare -r SCRIPT_NAME=$(basename "$BASH_SOURCE" .sh)

## exit the shell(default status code: 1) after printing the message to stderr
bail() {
    echo -ne "$1" >&2
    exit ${2-1}
} 

## help message
declare -r HELP_MSG="Usage: $SCRIPT_NAME [OPTION] [EXPERIMENT NAME]
  -h    display this help and exit
  -m    user email
"

## print the usage and exit the shell(default status code: 2)
usage() {
    declare status=2
    if [[ "$1" =~ ^[0-9]+$ ]]; then
        status=$1
        shift
    fi
    bail "${1}$HELP_MSG" $status
}

while getopts "hm:" opt; do
    case $opt in
        h)
            usage 0
            ;;
        m)
            EMAIL=$OPTARG
            ;;
        \?)
            usage "Invalid option: -$OPTARG \n"
            ;;
    esac
done

shift $(($OPTIND - 1))

# [[ "$#" -lt 1 ]] && usage "Too few arguments\n"

#==========MAIN CODE BELOW==========

bpipeconfig_file="bpipe.config"
username=`id -u -n`
queue="workq"
executor="pbspro"

# PROJECT NAME PARSING
# Project name qstat specs:
# Project name can contain any characters except for the following: 
# Slash ("/ "), left bracket ("["), right bracket ("]"), double quote ("""), 
# semicolon (";"), colon (":"), vertical bar ("|"), left angle bracket ("<"), 
# right angle bracket (">"), plus ("+"), comma (","), question mark ("?"), and asterisk ("*").

SAMPLE_SHEET=${PWD}/SampleSheet.csv

if [[ "$#" == "0" ]]; then
	if [ -f $SAMPLE_SHEET ]; then
		echo -e "No experiment name provided: using info from $SAMPLE_SHEET" >&2
		PROJECTNAME=`tail -1 $SAMPLE_SHEET | cut -d',' -f3`
	else
		PROJECTNAME=${username}_pipe_${RANDOM}
		echo -e "No experiment name provided and No $SAMPLE_SHEET. Using random generated project name: $PROJECTNAME" >&2
	fi
else
	echo -e "Using provided user defined experiment name: $1" >&2
	PROJECTNAME=$1
fi

# parse project name according to specs
PROJECTNAME=`echo $PROJECTNAME | sed -e 's/[]\/()$*.^|<>;:"+,?[]/_/g'`

# parse email
if [[ ! -z $EMAIL ]]; then
    email_user=$(echo -e "notifications {
    gmail { 
        to=\"$EMAIL\"
        username=\"bpipe.notify@gmail.com\"
        password=\"bp1p3n0tify\"
        events=\"FINISHED\" // receive notifications as each stage completes
    }
}")
fi

echo -e "Generationg bpipe config file $bpipeconfig_file in $PWD" >&2
cat << EOF > ${PWD}/$bpipeconfig_file
/**************************************************************************************************************************************
 * 
 * BPIPE PBS PROFESSIONAL CONFIGURATION FILE
 * Generated by $SCRIPT_NAME.sh
 * Author: davide.rambaldi AT gmail DOT com
 * Description: the first options are "general" options, 
 * you can use alternative "per command" options with the syntax:
 * 
 * stage = {
 *   exec "Command to execute here", "configuration name"  
 * }
 * 
 * Example:
 * 
 * align = { exec "\$SSPLICE -d \$REFERENCE_GENOME -1 \$input1 -2 \$input2 -o \$TMP_OUTPUT_PREFIX -p 4 \$SSPLICEOPT_ALN;","soapsplice" }
 *
 **************************************************************************************************************************************/
executor="$executor"
account="$username"
queue="$queue"
project="$PROJECTNAME"
select_statement="select=1:ncpus=4:mem=32g"
$email_user

// command specific configurations
commands {
    soapsplice {
        select_statement="select=1:ncpus=4:mem=32g"
    }
    merge_bam_files {
        select_statement="select=1:ncpus=8:mem=48g" 
    }
    htseq_count {
        select_statement="select=1:ncpus=10:mem=48g"   
    }
}

EOF